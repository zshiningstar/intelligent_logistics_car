#ifndef PATHTRACK_H
#define PATHTRACK_H

#include <ros/ros.h>
#include <logistics_msgs/RealState.h>
#include <logistics_msgs/GoalState.h>
#include <std_msgs/Float32.h>
#include <std_msgs/UInt32.h>
#include <std_msgs/UInt8.h>
#include <vector>
#include <nav_msgs/Odometry.h> 
#include <geometry_msgs/Quaternion.h>
#include <tf/transform_datatypes.h>
#include <std_msgs/Float32.h>
#include <climits>
#include <boost/thread.hpp>
#include <boost/bind.hpp>
#include <thread>

#include<ant_math/ant_math.h>

//typedef struct
//{
//	double longitude;  // 经度
//	double latitude;   // 维度
//	double yaw;        // 航向角
//	double x;
//	double y;
//	float curvature;   // 曲率
//}gpsMsg_t;

class PathTracking
{
public:
	PathTracking();
	~PathTracking();
	bool init(ros::NodeHandle nh,ros::NodeHandle nh_private);
	void run();
	
	void pub_car_goal_callback(const ros::TimerEvent&);                       // 定时发布车辆目标状态信息（转角和速度）
	void gps_odom_callback(const nav_msgs::Odometry::ConstPtr& utm);          // 订阅GPS发布过来的消息（包括车辆自身的航向角、车辆自身的utm_x/utm_y/yaw）
	void car_state_callback(const logistics_msgs::RealState::ConstPtr& msg);
	
	bool is_gps_data_valid(gpsMsg_t& point);
	void rosSpinThread(){ros::spin();}
	
private:
	gpsMsg_t pointOffset(const gpsMsg_t& point,float offset);
//	void publishPathTrackingState();
private:
	ros::Subscriber sub_utm_odom;
	ros::Subscriber sub_car_state;
	ros::Subscriber sub_is_object; //是否有障碍物闯入5m之内
	ros::Timer timer_;
	
	ros::Publisher pub_car_goal;
	
	boost::shared_ptr<boost::thread> rosSpin_thread_ptr_;
	
	std::string path_points_file_;
	std::vector<gpsMsg_t> path_points_;
	
	gpsMsg_t current_point_, target_point_;
	
	float min_foresight_distance_;
	float disThreshold_;

	float track_speed_;
	
	bool vehicle_speed_status_;
	
	float vehicle_speed_;
	float current_roadwheelAngle_;
	
	float safety_distance_front_;
	float danger_distance_front_;
	
	float max_roadwheelAngle_;
	float max_side_accel_;
	bool is_avoiding_;
	float lateral_err_;
	float yaw_err_;
	
	size_t target_point_index_;
	size_t nearest_point_index_;
	
	float foreSightDis_speedCoefficient_;
	float foreSightDis_latErrCoefficient_;
	
	logistics_msgs::GoalState car_goal;
	logistics_msgs::RealState car_state;
	
};


#endif
